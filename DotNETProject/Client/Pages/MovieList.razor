@page "/list/{Type}"
@using DotNETProject.Shared
@inject HttpClient httpClient

<PageTitle>@TITLE</PageTitle>

<div class="container">
    <div class="content-container">
        <!-- FILTER -->
        <div class="container me-3 mb-3">
            <div class="row">
                <!-- Thể loại -->
                <div class="col-md-4">
                    <select class="form-select" aria-label="By Genre" @onchange="FilterByGenre">
                        <option selected value="0">Thể loại</option>
                        @foreach (var item in genres)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
                <!-- Nam phat hanh -->
                <div class="col-md-4">
                    <select class="form-select" aria-label="By Release Year" @onchange="FilterByReleaseYear">
                        <option selected value="none">Năm phát hành</option>
                        @foreach (var item in distinctReleaseYears)
                        {
                            <option value="@item">@item</option>
                        }
                    </select>
                </div>
                <!-- Quốc gia -->
                <div class="col-md-4">
                    <select class="form-select" aria-label="By Nation" @onchange="FilterByNation">
                        <option selected value="none">Quốc gia</option>
                        @foreach (var item in nations)
                        {
                            <option value="@item.Name">@item.Name</option>
                        }
                    </select>
                </div>

            </div>
        </div>
        <!-- MOVIE LIST -->
        <div class="container list">
            <div class="row">
                @if (DisplayedItems.Any())
                {
                    var path = Type == "movie" ? "movie" : "tv";
                    @foreach (var item in DisplayedItems)
                    {
                        <div class="col-lg-2 col-md-3 col-sm-6 col-xs-6">
                            <a href="/@path/@item.Id">
                                <img src="@item.PosterUrl" alt="@item.Name">
                                <p>@item.Name</p>
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12 text-light h5 text-center">Không tìm thấy phim bạn muốn xem :(</div>
                }
            </div>
        </div>
        <!-- PAGINATION -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" @onclick="() => GoToPage(currentPage - 1)" tabindex="-1" aria-disabled="@(currentPage == 1 ? "true" : "false")">Previous</a>
                </li>
                @for (var pagenum = 1; pagenum <= TotalPages; pagenum++)
                {
                    <li class="page-item @(currentPage == pagenum ? "active" : "")">
                        <a class="page-link" @onclick="() => GoToPage(pagenum)">@pagenum</a>
                    </li>
                }
                <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                    <a class="page-link" @onclick="() => GoToPage(currentPage + 1)">Next</a>
                </li>
            </ul>
        </nav>
    </div>
</div>

@code {
    [Parameter] public string Type { get; set; }
    private IEnumerable<MovieDto> movies = new List<MovieDto>();
    private IEnumerable<TVSeriesDto> shows = new List<TVSeriesDto>();
    private IEnumerable<GenreDto> genres = new List<GenreDto>();
    private IEnumerable<NationDto> nations = new List<NationDto>();

    private List<int> filteredGenre = new List<int>();
    private string selectedReleaseYear = null;
    private string selectedNation = null;
    private List<string> distinctReleaseYears;

    private string TITLE;

    private int pageSize = 18;
    private int currentPage = 1;
    private int totalItems;

    private int TotalPages => (int)Math.Ceiling((double)totalItems / pageSize);

    private IEnumerable<FilmDto> DisplayedItems =>
        Type == "movie" ? FilterAndPaginate(movies) : FilterAndPaginate(shows);

    private IEnumerable<FilmDto> FilterAndPaginate(IEnumerable<FilmDto> films)
    {
        var filteredFilms = films;

        if (filteredGenre.Count > 0)
        {
            filteredFilms = filteredFilms.Where(film => film.FilmGenres.Any(f => filteredGenre.Contains(f.Genre.Id)));
        }
        if (!string.IsNullOrEmpty(selectedReleaseYear))
        {
            filteredFilms = filteredFilms.Where(film => film.ReleaseYear == selectedReleaseYear);
        }
        if (!string.IsNullOrEmpty(selectedNation))
        {
            filteredFilms = filteredFilms.Where(film => film.Nation.Name == selectedNation);
        }
        totalItems = filteredFilms.Count();
        return filteredFilms.Skip((currentPage - 1) * pageSize).Take(pageSize);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Type == "movie")
        {
            TITLE = "Phim lẻ";
            movies = await httpClient.GetFromJsonAsync<List<MovieDto>>("api/Movies");
        }
        else if (Type == "tvseries")
        {
            TITLE = "Phim bộ";
            shows = await httpClient.GetFromJsonAsync<List<TVSeriesDto>>("api/TVSeries");
        }
        genres = await httpClient.GetFromJsonAsync<List<GenreDto>>("api/Genres");
        distinctReleaseYears = await httpClient.GetFromJsonAsync<List<string>>("api/Films/years");
        nations = await httpClient.GetFromJsonAsync<List<NationDto>>("api/Nations");
    }

    private void FilterByGenre(ChangeEventArgs e)
    {
        int genreId = int.Parse(e.Value.ToString());
        if (genreId == 0)
        {
            filteredGenre.Clear();
        }
        else
        {
            filteredGenre.Clear();
            filteredGenre.Add(genreId);
        }
        currentPage = 1;
    }

    private void FilterByReleaseYear(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "none")
        {
            selectedReleaseYear = null;
        } else
        {
            selectedReleaseYear = e.Value.ToString();
        }
        
        currentPage = 1;
    }

    private void FilterByNation(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "none")
        {
            selectedNation = null;
        }
        else
        {
            selectedNation = e.Value.ToString();
        }
        currentPage = 1;
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
        }
    }

}
