@page "/login"
@layout AuthenticationLayout

@using DotNETProject.Shared;
@using Newtonsoft.Json;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage

<div class="container">
    <div class="row">
        <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
            <div class="card border-0 shadow rounded-3 my-5 bg-dark text-light">
                <div class="card-body p-4 p-sm-5">
                    <h3 class="card-title text-center mb-5 fw-light fs-5">Sign In</h3>
                    <form @onsubmit="LoginUser">
                        <div class="form-floating mb-3 text-dark">
                            <input type="email" class="form-control" id="floatingInput" placeholder="name@example.com" @bind="userDto.Email">
                            <label for="floatingInput">Email address</label>
                        </div>
                        <div class="form-floating mb-3 text-dark">
                            <input type="password" class="form-control" id="floatingPassword" placeholder="Password" @bind="userDto.Password">
                            <label for="floatingPassword">Password</label>
                        </div>

                        <div class="form-check mb-3 d-flex justify-content-between">
                            <div>
                                <input class="form-check-input" type="checkbox" value="" id="rememberPasswordCheck">
                                <label class="form-check-label" for="rememberPasswordCheck">
                                    Remember password
                                </label>
                            </div>
                            <NavLink href="/forgotpassword">Forgot password</NavLink>
                        </div>
                        <div class="d-grid">
                            <button class="btn btn-primary btn-login text-uppercase fw-bold" type="submit">
                                Sign in
                            </button>
                            
                        </div>
                        <div class="d-grid">
                            <span>Don't have an account? <a href="/register">Sign Up</a></span>
                            
                        </div>
                        <hr class="my-4">
                        <div class="d-grid mb-2">
                            <button class="btn btn-google btn-login text-uppercase fw-bold" type="submit">
                                <i class="fab fa-google me-2"></i> Sign in with Google
                            </button>
                        </div>
                        <div class="d-grid">
                            <button class="btn btn-facebook btn-login text-uppercase fw-bold" type="submit">
                                <i class="fab fa-facebook-f me-2"></i> Sign in with Facebook
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private UserDto userDto = new UserDto();
    private string errorMessage = "";

    private async Task LoginUser()
    {
        try
        {
            var content = new StringContent(JsonConvert.SerializeObject(userDto), System.Text.Encoding.UTF8, "application/json");
            var response = await HttpClient.PostAsync("/api/auth/login", content);

            if (response.IsSuccessStatusCode)
            {
                // Login successful
                var responseContent = await response.Content.ReadAsStringAsync();
                var responseDto = JsonConvert.DeserializeObject<ReponseDto>(responseContent);

                await localStorage.SetItemAsync("token", responseDto.token);
                await localStorage.SetItemAsync("email", userDto.Email);
                await localStorage.SetItemAsync("tokenExpiration", responseDto.tokenExpired);
                

                Console.WriteLine("Token: " + localStorage.GetItemAsStringAsync("token"));

                NavigationManager.NavigateTo("/");
            }
            else
            {
                // Registration failed, handle errors
                if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    // User already exists or other validation errors
                    errorMessage = "Login failed. Please check your credentials.";
                }
                else
                {
                    // Handle other error cases
                    errorMessage = "An error occurred during login.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
    }
}
