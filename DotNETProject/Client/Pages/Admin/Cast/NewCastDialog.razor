@page "/create-cast"
@using DotNETProject.Shared;
@using Firebase.Storage;
@using MudBlazor
@inject IDialogService Dialog
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="castDto.Name" Label="Name" />
        <MudTextField @bind-Value="castDto.Description" Label="Description" Lines="5" />
        @* <MudTextField @bind-Value="castDto.AvatarUrl" Label="Avatar URL" /> *@

        <MudFileUpload @bind-Files="image" Label="Avatar Image" T="IBrowserFile" Accept=".png, .jpg">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    Avatar
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>

        <!-- The image preview -->
        @if (image != null)
        {
            <MudText Icon="@Icons.Material.Filled.AttachFile">
                @image.Name <code>@image.Size bytes</code>
            </MudText>
        }

        <MudTextField @bind-Value="castDto.Nation" Label="Nation" />


        <MudSelect Label="Gender" @bind-Value="castDto.Gender">
            <MudSelectItem Value="Male" Text="Male" />
            <MudSelectItem Value="Female" Text="Female" />
        </MudSelect>

        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="BirthDate" Editable="true" DateFormat="dd.MM.yyyy" @bind-Date="castDto.BirthDate" Placeholder="Select Date" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="nestedVisible">
    <DialogContent>
        <MudText Class="nested">@message</MudText>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private CastDto castDto = new CastDto();
    public String Male = "Male";
    public String Female = "Female";
    public IBrowserFile image;

    private string message;
    private bool nestedVisible;
    private void OpenNested() => nestedVisible = true;
    private void CloseNested() => nestedVisible = false;

    async Task Submit()
    {
        try
        {
            string imageUrl = await HandleFirebaseImageUpload(image);

            if (!string.IsNullOrEmpty(imageUrl))
            {
                castDto.AvatarUrl = imageUrl;
                var response = await httpClient.PostAsJsonAsync("api/Casts", castDto);

                if (response.IsSuccessStatusCode)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    await JSRuntime.InvokeVoidAsync("refreshPage");
                }
                else
                {
                    var errorResponse = await response.Content.ReadAsStringAsync();
                    message = "An error occurred while saving to the database: " + errorResponse;
                    OpenNested();
                }
            }
            else
            {
                message = "An error occurred while uploading to Firebase.";
                OpenNested();
            }
        }
        catch (Exception ex)
        {
            message = "An error occurred: " + ex.Message;
            OpenNested();
        }
    }

    async Task<string> HandleFirebaseImageUpload(IBrowserFile file)
    {
        try
        {

            var storage = new FirebaseStorage("dotnetproject-339c8.appspot.com");

            string folderPath = "Casts/Avatars";
            string imageFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";

            var imageUrl = await storage.Child(folderPath)
                .Child(imageFileName)
                .PutAsync(file.OpenReadStream());

            return imageUrl;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            return null;
        }
    }

    void Cancel() => MudDialog.Cancel();
}
