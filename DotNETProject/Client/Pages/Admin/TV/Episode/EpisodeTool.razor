@page "/admin/Episode-management"
@using DotNETProject.Shared;
@using MudBlazor
@using DotNETProject.Client.Service;
@using System.Net.Http.Headers;
@inject CustomAuthStateProvider auth
@inject HttpClient httpClient
@inject IDialogService Dialog
@inject IJSRuntime JSRuntime

@layout AdminLayout

<PageTitle>QUẢN LÝ TẬP PHIM</PageTitle>

<MudDialog>
    <DialogContent>
        <MudGrid>
            <!-- Content -->
            <MudItem xs="12">
                <MudButton Class="m-3 ml-0" Color="Color.Error" OnClick="DeleteSelectedEpisode">DELETE SELECTED</MudButton>
                <!-- Table of actor/ actress -->
                <MudTable MultiSelection="true" Items="@tvshow.episodes" T="EpisodeDto" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<EpisodeDto,bool>(FilterFunc1)" @bind-SelectedItems="selectedItems">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">EPISODES</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Episode</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Time</MudTh>
                        <MudTh>Link</MudTh>
                        <MudTh>View</MudTh>
                        <MudTh></MudTh>
                        @* <MudTh></MudTh> *@
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.Id</MudTd>
                        <MudTd DataLabel="Number">@context.EpisodeNumber</MudTd>
                        <MudTd DataLabel="Name">@context.EpisodeName</MudTd>
                        <MudTd DataLabel="Time">@context.Time</MudTd>
                        <MudTd DataLabel="Link">@context.Link</MudTd>
                        <MudTd DataLabel="View">@context.View</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteEpisode(context.Id))">Delete</MudButton>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => EditEpisode(context.Id, context, maxWidth))">Edit</MudButton>
                        </MudTd>

                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>

                    <FooterContent>
                        <MudTd colspan="10">Select All</MudTd>
                    </FooterContent>

                </MudTable>
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";

    private bool dataChanged = false;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    // public IEnumerable<EpisodeDto> episodes;

    public TVSeriesDto tvshow = new TVSeriesDto();

    [Parameter] public int Id { get; set; }

    private HashSet<EpisodeDto> selectedItems = new HashSet<EpisodeDto>();

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    Dictionary<int, bool> showEpisodeDialogStates = new Dictionary<int, bool>();

    protected override async Task OnInitializedAsync()
    {
        var token = await auth.GetTokenFromLocalStorage();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        tvshow = await httpClient.GetFromJsonAsync<TVSeriesDto>($"api/TVSeries/{Id}");
        
        foreach (var episodeDto in tvshow.episodes)
        {
            showEpisodeDialogStates[episodeDto.Id] = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && dataChanged)
        {
            dataChanged = false;
            await RefreshData();
        }
    }

    void OpenEpisodeNested(int episodeId)
    {
        showEpisodeDialogStates[episodeId] = true;
    }

    void CloseEpisodeNested(int episodeId)
    {
        showEpisodeDialogStates[episodeId] = false;
    }

    private bool FilterFunc1(EpisodeDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(EpisodeDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.EpisodeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async void OpenDialog(DialogOptions options)
    {
        DialogParameters paras = new DialogParameters();

        paras.Add("TVName", tvshow.Name);

        var dialog = Dialog.Show<NewEpisodeDialog>($"New Episode for {tvshow.Name}", options);
        
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (result.Data is EpisodeDto episode)
            {
                await RefreshData();
            }

        }
    }

    private async void EditEpisode(int EpisodeId, EpisodeDto currentEpisode, DialogOptions options)
    {
        DialogParameters paras = new DialogParameters();

        paras.Add("currentEpisode", currentEpisode);
        paras.Add("TVName", tvshow.Name);
        
        var dialog = Dialog.Show<EditEpisodeDialog>("Edit Episode", paras, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (result.Data.Equals(true))
            {
                await RefreshData();
            }

        }

    }

    private async void DeleteEpisode(int episodeId)
    {
        bool? result = await Dialog.ShowMessageBox("Confirm Delete", "Are you sure you want to delete this Episode?", yesText: "Yes", noText: "No");
        if (result == true)
        {
            var token = await auth.GetTokenFromLocalStorage();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            HttpResponseMessage response = await httpClient.DeleteAsync($"api/Episodes/{episodeId}");

            if (response.IsSuccessStatusCode)
            {
                tvshow.episodes = tvshow.episodes.Where(c => c.Id != episodeId).ToList();
                dataChanged = true;
            }
            else
            {
                await Dialog.ShowMessageBox("Error", "Failed to delete the Episode. Please try again.");
            }
        }
    }

    private async void DeleteSelectedEpisode()
    {
        bool? result = await Dialog.ShowMessageBox("Confirm Delete", "R u sure bout that? Data can't be change after remove!", yesText: "Yes", noText: "No");

        if (result == true)
        {
            foreach (var item in selectedItems)
            {
                try
                {
                    var token = await auth.GetTokenFromLocalStorage();
                    httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                    HttpResponseMessage response = await httpClient.DeleteAsync($"api/Episodes/{item.Id}");

                    if (response.IsSuccessStatusCode)
                    {
                        selectedItems.Remove(item);
                    }
                    else
                    {
                        await Dialog.ShowMessageBox("Error", "Failed to delete the Episode. Please try again.");
                    }
                }
                catch (HttpRequestException)
                {
                    await Dialog.ShowMessageBox("Network Error", "Failed to connect to the server. Please check your internet connection.");
                }
                catch (Exception ex)
                {
                    await Dialog.ShowMessageBox("Error", $"An unexpected error occurred: {ex.Message}");
                }
            }
            dataChanged = true;
        }
    }

    private async Task RefreshData()
    {
        var token = await auth.GetTokenFromLocalStorage();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        tvshow = await httpClient.GetFromJsonAsync<TVSeriesDto>($"api/TVSeries/{Id}");

        showEpisodeDialogStates.Clear();

        foreach (var episodeDto in tvshow.episodes)
        {
            showEpisodeDialogStates[episodeDto.Id] = false;
        }

        StateHasChanged();
    }

    void Cancel() => MudDialog.Cancel();
}
