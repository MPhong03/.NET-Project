@page "/admin/cast-management"
@using DotNETProject.Shared;
@using MudBlazor
@inject HttpClient httpClient
@inject IDialogService Dialog
@inject IJSRuntime JSRuntime

@layout AdminLayout

<MudGrid>
    <!-- Content -->
    <MudItem xs="12">
        <MudButton Class="m-3 ml-0" Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => OpenDialog(maxWidth))">NEW ACTOR/ACTRESS</MudButton>
        <!-- Table of actor/ actress -->
        <MudTable Items="@cast" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<CastDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
            <ToolBarContent>
                <MudText Typo="Typo.h6">ACTOR/ACTRESS</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Avatar</MudTh>
                <MudTh>Gender</MudTh>
                <MudTh>Nation</MudTh>
                <MudTh>BirthDate</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Participate</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Avatar">
                    <MudImage Src="@context.AvatarUrl" Width="75" Height="75" Alt="@context.Name" Elevation="25" Class="rounded-lg" />
                </MudTd>
                <MudTd DataLabel="Gender">@context.Gender</MudTd>
                <MudTd DataLabel="Nation">@context.Nation</MudTd>
                <MudTd DataLabel="BirthDate">@context.BirthDate</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Participate">Updating</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteCast(context.Id))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private CastDto selectedItem1 = null;
    private HashSet<CastDto> selectedItems = new HashSet<CastDto>();
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private IEnumerable<CastDto> cast = new List<CastDto>();

    protected override async Task OnInitializedAsync()
    {
        cast = await httpClient.GetFromJsonAsync<List<CastDto>>($"api/Casts");
    }

    private bool FilterFunc1(CastDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(CastDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Name}".Contains(searchString))
            return true;
        return false;
    }

    private void OpenDialog(DialogOptions options)
    {
        Dialog.Show<NewCastDialog>("New Actor/Actress", options);
    }

    private async void DeleteCast(int castId)
    {
        bool? result = await Dialog.ShowMessageBox("Confirm Delete", "Are you sure you want to delete this cast?", yesText: "Yes", noText: "No");
        if (result == true)
        {
            HttpResponseMessage response = await httpClient.DeleteAsync($"api/Casts/{castId}");

            if (response.IsSuccessStatusCode)
            {
                cast = cast.Where(c => c.Id != castId).ToList();
                await JSRuntime.InvokeVoidAsync("refreshPage");
            }
            else
            {
                await Dialog.ShowMessageBox("Error", "Failed to delete the cast. Please try again.");
            }
        }
    }

}
