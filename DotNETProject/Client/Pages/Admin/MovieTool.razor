@page "/admin/movie-management"
@using DotNETProject.Shared;
@using MudBlazor
@inject HttpClient httpClient
@inject IDialogService Dialog
@inject IJSRuntime JSRuntime

@layout AdminLayout

<MudGrid>
    <!-- Content -->
    <MudItem xs="12">
        <MudButton Class="m-3 ml-0" Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => OpenDialog(maxWidth))">NEW MOVIE</MudButton>
        <!-- Table of actor/ actress -->
        <MudTable Items="@movie" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<MovieDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
            <ToolBarContent>
                <MudText Typo="Typo.h6">MOVIES</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Link</MudTh>
                <MudTh>Time</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>ReleaseYear</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>IMDBScore</MudTh>
                <MudTh>View</MudTh>
                <MudTh>Poster</MudTh>
                <MudTh>Background</MudTh>
                <MudTh>Logo</MudTh>
                <MudTh>Casts</MudTh>
                <MudTh>Directors</MudTh>
                <MudTh>TrailerUrl</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Title</MudTd>
                <MudTd DataLabel="Link">@context.Link</MudTd>
                <MudTd DataLabel="Time">@context.Time</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="ReleaseYear">@context.ReleaseYear</MudTd>
                <MudTd DataLabel="Description">@context.Description.Substring(0, 20)...</MudTd>
                <MudTd DataLabel="IMDBScore">@context.IMDBScore</MudTd>
                <MudTd DataLabel="View">@context.View</MudTd>
                <MudTd DataLabel="Poster">
                    <MudImage Src="@context.PosterUrl" Width="75" Height="75" Alt="@context.Name" Elevation="25" Class="rounded-lg" />
                </MudTd>
                <MudTd DataLabel="Background">
                    <MudImage Src="@context.BackgroundUrl" Width="75" Height="75" Alt="@context.Name" Elevation="25" Class="rounded-lg" />
                </MudTd>
                <MudTd DataLabel="Logo">
                    <MudImage Src="@context.LogoUrl" Width="75" Height="75" Alt="@context.Name" Elevation="25" Class="rounded-lg" />
                </MudTd>
                <MudTd DataLabel="Casts">Updating</MudTd>
                <MudTd DataLabel="Directors">Updating</MudTd>
                <MudTd DataLabel="TrailerUrl">@context.TrailerUrl</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteMovie(context.Id))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private MovieDto selectedItem1 = null;
    private HashSet<MovieDto> selectedItems = new HashSet<MovieDto>();
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private IEnumerable<MovieDto> movie = new List<MovieDto>();

    protected override async Task OnInitializedAsync()
    {
        movie = await httpClient.GetFromJsonAsync<List<MovieDto>>($"api/Movies");
    }

    private bool FilterFunc1(MovieDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(MovieDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Name}".Contains(searchString))
            return true;
        return false;
    }

    private void OpenDialog(DialogOptions options)
    {
        Dialog.Show<NewMovieDialog>("New Movie", options);
    }

    private async void DeleteMovie(int movieId)
    {
        bool? result = await Dialog.ShowMessageBox("Confirm Delete", "Are you sure you want to delete this movie?", yesText: "Yes", noText: "No");
        if (result == true)
        {
            HttpResponseMessage response = await httpClient.DeleteAsync($"api/Movies/{movieId}");

            if (response.IsSuccessStatusCode)
            {
                movie = movie.Where(c => c.Id != movieId).ToList();
                await JSRuntime.InvokeVoidAsync("refreshPage");
            }
            else
            {
                await Dialog.ShowMessageBox("Error", "Failed to delete the movie. Please try again.");
            }
        }
    }

}
