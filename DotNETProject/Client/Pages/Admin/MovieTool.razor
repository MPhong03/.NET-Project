@page "/admin/movie-management"
@using DotNETProject.Shared;
@using MudBlazor
@inject HttpClient httpClient
@inject IDialogService Dialog
@inject IJSRuntime JSRuntime

@layout AdminLayout

<MudGrid>
    <!-- Content -->
    <MudItem xs="12">
        <MudButton Class="m-3 ml-0" Color="Color.Primary" OnClick="@((e) => OpenDialog(maxWidth))">NEW MOVIE</MudButton>
        <MudButton Class="m-3 ml-0" Color="Color.Error" OnClick="DeleteSelectedMovie">DELETE SELECTED</MudButton>
        <!-- Table of actor/ actress -->
        <MudTable MultiSelection="true" Items="@movie" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<MovieDto,bool>(FilterFunc1)" @bind-SelectedItems="selectedItems">
            <ToolBarContent>
                <MudText Typo="Typo.h6">MOVIES</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Poster</MudTh>
                <MudTh>Background</MudTh>
                <MudTh>Logo</MudTh>
                <MudTh>Link</MudTh>
                <MudTh>Time</MudTh>
                <MudTh>ReleaseYear</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>IMDBScore</MudTh>
                <MudTh>View</MudTh>
                <MudTh>TrailerUrl</MudTh>
                <MudTh>Casts</MudTh>
                <MudTh>Directors</MudTh>
                <MudTh>Genres</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
                <MudTh>Add to banner</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Poster">
                    <MudImage Src="@context.PosterUrl" Width="75" Height="75" Alt="@context.Name" Elevation="25" Class="rounded-lg" />
                </MudTd>
                <MudTd DataLabel="Background">
                    <MudImage Src="@context.BackgroundUrl" Width="75" Height="75" Alt="@context.Name" Elevation="25" Class="rounded-lg" />
                </MudTd>
                <MudTd DataLabel="Logo">
                    <MudImage Src="@context.LogoUrl" Width="75" Height="75" Alt="@context.Name" Elevation="25" Class="rounded-lg" />
                </MudTd>
                <MudTd DataLabel="Link">@context.Link</MudTd>
                <MudTd DataLabel="Time">@context.Time</MudTd>
                <MudTd DataLabel="ReleaseYear">@context.ReleaseYear</MudTd>
                <MudTd DataLabel="Description">
                    @if (context.Description.Length < 20)
                    {
                           <MudTd DataLabel="Description">
                            @context.Description
                        </MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="Description">
                            @context.Description.Substring(0, 20)...
                        </MudTd>
                    }
                </MudTd>
                <MudTd DataLabel="IMDBScore">@context.IMDBScore</MudTd>
                <MudTd DataLabel="View">@context.View</MudTd>
                <MudTd DataLabel="TrailerUrl">@context.TrailerUrl</MudTd>
                
                <MudTd DataLabel="Casts">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenCastNested(context.Id)">Show</MudButton>

                    <MudDialog @bind-IsVisible="showCastDialogStates[context.Id]">
                        <DialogContent>
                            @if (context.FilmCasts.Count != 0)
                            {
                                @foreach (var cast in context.FilmCasts)
                                {
                                    <MudText>@(cast.Cast.Name + " - " + cast.Role)</MudText>
                                }
                            }
                            else
                            {
                                <MudText>There is no actor/actress</MudText>
                            }
                        </DialogContent>
                        <DialogActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => CloseCastNested(context.Id)">Close</MudButton>
                        </DialogActions>
                    </MudDialog>
                </MudTd>

                <MudTd DataLabel="Directors">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenDirectorNested(context.Id)">Show</MudButton>

                    <MudDialog @bind-IsVisible="showDirectorDialogStates[context.Id]">
                        <DialogContent>
                            @if (context.FilmDirectors.Count != 0)
                            {
                                @foreach (var director in context.FilmDirectors)
                                {
                                    <MudText>@director.Director.Name</MudText>
                                }
                            }
                            else
                            {
                                <MudText>There is no director</MudText>
                            }
                        </DialogContent>
                        <DialogActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => CloseDirectorNested(context.Id)">Close</MudButton>
                        </DialogActions>
                    </MudDialog>
                </MudTd>

                <MudTd DataLabel="Genres">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenGenreNested(context.Id)">Show</MudButton>

                    <MudDialog @bind-IsVisible="showGenreDialogStates[context.Id]">
                        <DialogContent>
                            @if (context.FilmGenres.Count != 0)
                            {
                                @foreach (var genre in context.FilmGenres)
                                {
                                    <MudText>@genre.Genre.Name</MudText>
                                    Console.WriteLine(genre.Genre.Name);
                                }
                            }
                            else
                            {
                                Console.WriteLine(context.FilmGenres.Count);
                                <MudText>There is no genre</MudText>
                            }
                        </DialogContent>
                        <DialogActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => CloseGenreNested(context.Id)">Close</MudButton>
                        </DialogActions>
                    </MudDialog>
                </MudTd>

                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteMovie(context.Id))">Delete</MudButton>
                </MudTd>
                <MudTd>
                     <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => EditMovie(context, maxWidth))">Edit</MudButton>
                </MudTd>
                <MudTd>
                    @if(context.isActiveBanner == false)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => ActiveMovie(context))">ON</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => ActiveMovie(context))">OFF</MudButton>
                    }
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

<MudDialog @bind-IsVisible="nestedVisible">
    <DialogContent>
        <MudText Class="nested">@message</MudText>
    </DialogContent>
</MudDialog>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private string message = "";

    private HashSet<MovieDto> selectedItems = new HashSet<MovieDto>();

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    Dictionary<int, bool> showCastDialogStates = new Dictionary<int, bool>();
    Dictionary<int, bool> showDirectorDialogStates = new Dictionary<int, bool>();
    Dictionary<int, bool> showGenreDialogStates = new Dictionary<int, bool>();

    private IEnumerable<MovieDto> movie = new List<MovieDto>();

    private bool nestedVisible;
    private void OpenNested() => nestedVisible = true;
    private void CloseNested() => nestedVisible = false;

    protected override async Task OnInitializedAsync()
    {
        movie = await httpClient.GetFromJsonAsync<List<MovieDto>>($"api/Movies");

        foreach (var movieDto in movie)
        {
            showCastDialogStates[movieDto.Id] = false;
            showDirectorDialogStates[movieDto.Id] = false;
            showGenreDialogStates[movieDto.Id] = false;
        }
    }

    void OpenCastNested(int movieId)
    {
        showCastDialogStates[movieId] = true;
    }

    void CloseCastNested(int movieId)
    {
        showCastDialogStates[movieId] = false;
    }

    void OpenDirectorNested(int movieId)
    {
        showDirectorDialogStates[movieId] = true;
    }

    void CloseDirectorNested(int movieId)
    {
        showDirectorDialogStates[movieId] = false;
    }

    void OpenGenreNested(int movieId)
    {
        showGenreDialogStates[movieId] = true;
    }

    void CloseGenreNested(int movieId)
    {
        showGenreDialogStates[movieId] = false;
    }

    private bool FilterFunc1(MovieDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(MovieDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Name}".Contains(searchString))
            return true;
        return false;
    }

    private void EditMovie(MovieDto movieDto, DialogOptions options)
    {
        DialogParameters paras = new DialogParameters();
        paras.Add("currentMovie", movieDto);

        Dialog.Show<EditMovieDialog>("Edit Movie", paras, options);
    }

    private async Task ActiveMovie(MovieDto movieDto)
    {
        try
        {
            if (movieDto.isActiveBanner == false)
            {
                movieDto.isActiveBanner = true;
            }
            else
            {
                movieDto.isActiveBanner = false;
            }

            var response = await httpClient.PutAsJsonAsync($"api/Movies/{movieDto.Id}", movieDto);

            if (!response.IsSuccessStatusCode)
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                message = "An error occurred while saving to the database: " + errorResponse;
                OpenNested();
            }
        }
        catch (Exception ex)
        {
            message = "An error occurred: " + ex.Message;
            OpenNested();
        }
        
    }

    private void OpenDialog(DialogOptions options)
    {
        Dialog.Show<NewMovieDialog>("New Movie", options);
    }

    private async void DeleteMovie(int movieId)
    {
        bool? result = await Dialog.ShowMessageBox("Confirm Delete", "Are you sure you want to delete this movie?", yesText: "Yes", noText: "No");
        if (result == true)
        {
            HttpResponseMessage response = await httpClient.DeleteAsync($"api/Movies/{movieId}");

            if (response.IsSuccessStatusCode)
            {
                movie = movie.Where(c => c.Id != movieId).ToList();
                await JSRuntime.InvokeVoidAsync("refreshPage");
            }
            else
            {
                await Dialog.ShowMessageBox("Error", "Failed to delete the movie. Please try again.");
            }
        }
    }

    private async void DeleteSelectedMovie()
    {
        bool? result = await Dialog.ShowMessageBox("Confirm Delete", "R u sure bout that? Data can't be change after remove!", yesText: "Yes", noText: "No");

        if (result == true)
        {
            foreach (var item in selectedItems)
            {
                try
                {
                    HttpResponseMessage response = await httpClient.DeleteAsync($"api/Movies/{item.Id}");

                    if (response.IsSuccessStatusCode)
                    {
                        selectedItems.Remove(item);
                    }
                    else
                    {
                        await Dialog.ShowMessageBox("Error", "Failed to delete the movie. Please try again.");
                    }
                }
                catch (HttpRequestException)
                {
                    await Dialog.ShowMessageBox("Network Error", "Failed to connect to the server. Please check your internet connection.");
                }
                catch (Exception ex)
                {
                    await Dialog.ShowMessageBox("Error", $"An unexpected error occurred: {ex.Message}");
                }
            }
            await JSRuntime.InvokeVoidAsync("refreshPage");
        }
    }
}
