@page "/edit-episode"
@using DotNETProject.Shared;
@using Firebase.Storage;
@using MudBlazor
@inject IDialogService Dialog
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">New Episode for @TVName</MudText>

        <MudTextField @bind-Value="currentEpisode.EpisodeName" Label="Name" />
        <MudTextField @bind-Value="currentEpisode.Time" Label="Time" />
        <MudTextField @bind-Value="currentEpisode.View" Label="Nation" />

        <MudFileUpload @bind-Files="video" Label="Video" T="IBrowserFile" Accept=".MKV .MOV .MP4">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    Upload Video
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>

        <!-- The video preview -->
        @if (video != null)
        {
            <MudText Icon="@Icons.Material.Filled.AttachFile">
                @video.Name <code>@video.Size bytes</code>
            </MudText>
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="nestedVisible">
    <DialogContent>
        <MudText Class="nested">@message</MudText>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string TVName { get; set; }

    [Parameter] public EpisodeDto currentEpisode { get; set;  }

    public IBrowserFile image;
    public IBrowserFile video;

    public long MAXALLOWEDSIZE = 2147483648;

    private string message;
    private bool nestedVisible;
    private void OpenNested() => nestedVisible = true;
    private void CloseNested() => nestedVisible = false;

    async Task Submit()
    {
        try
        {
            string folderName = (TVName).ToLower().Replace(' ', '-');
            string childFolderName = (currentEpisode.EpisodeName).ToLower().Replace(' ', '-');

            string videoUrl = currentEpisode.Link;

            if(video != null)
            {
                videoUrl = await HandleFirebaseUpload(video, $"Films/TVSeries/{folderName}/{childFolderName}/Video");
            }

            if (!string.IsNullOrEmpty(videoUrl))
            {
                currentEpisode.Link = videoUrl;

                var response = await httpClient.PutAsJsonAsync($"api/Episodes/{currentEpisode.Id}", currentEpisode);

                if (response.IsSuccessStatusCode)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    await JSRuntime.InvokeVoidAsync("refreshPage");
                }
                else
                {
                    var errorResponse = await response.Content.ReadAsStringAsync();
                    message = "An error occurred while saving to the database: " + errorResponse;
                    OpenNested();
                }

                MudDialog.Close(DialogResult.Ok(currentEpisode));
            }
            else
            {
                message = "An error occurred while uploading to Firebase.";
                OpenNested();
            }
        }
        catch (Exception ex)
        {
            message = "An error occurred: " + ex.Message;
            OpenNested();
        }
    }

    async Task<string> HandleFirebaseUpload(IBrowserFile file, string folderPath)
    {
        try
        {

            var storage = new FirebaseStorage("dotnetproject-339c8.appspot.com");

            folderPath = folderPath.Trim('/');

            var folderRef = storage.Child(folderPath);
            var folderExists = await FolderExistsAsync(folderRef);
            if (!folderExists)
            {
                await CreateFolderAsync(folderRef);
            }

            string imageFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";

            var imageUrl = await storage.Child(folderPath)
                .Child(imageFileName)
                .PutAsync(file.OpenReadStream(maxAllowedSize: MAXALLOWEDSIZE));

            return imageUrl;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            return null;
        }
    }

    private async Task<bool> FolderExistsAsync(FirebaseStorageReference folderRef)
    {
        try
        {
            await folderRef.GetDownloadUrlAsync();
            return true;
        }
        catch (FirebaseStorageException)
        {
            return false;
        }
    }

    private async Task CreateFolderAsync(FirebaseStorageReference folderRef)
    {
        try
        {
            await folderRef.Child(".placeholder").PutAsync(new MemoryStream());
        }
        catch (FirebaseStorageException ex)
        {
            Console.WriteLine($"Error creating folder: {ex.Message}");
        }
    }

    void Cancel() => MudDialog.Cancel();
}
