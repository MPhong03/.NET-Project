@page "/admin/user-management"
@using DotNETProject.Client.Service;
@using DotNETProject.Shared;
@using MudBlazor
@using System.Net.Http.Headers;
@inject CustomAuthStateProvider auth;
@inject HttpClient httpClient
@inject IDialogService Dialog
@inject IJSRuntime JSRuntime

@layout AdminLayout

<PageTitle>QUẢN LÝ NGƯỜI DÙNG</PageTitle>

<MudGrid>
    <!-- Content -->
    <MudItem xs="12">
        <MudButton Class="m-3 ml-0" Color="Color.Error" OnClick="DeleteSelecteduser">DELETE SELECTED</MudButton>
        <!-- Table of actor/ actress -->
        <MudTable MultiSelection="true" Items="@user" T="UserDetailDto" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<UserDetailDto,bool>(FilterFunc1)" @bind-SelectedItems="selectedItems">
            <ToolBarContent>
                <MudText Typo="Typo.h6">ACCOUNT</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Username</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Created Date</MudTh>
                <MudTh>ROLE</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Username</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Created Date">@context.createdDate</MudTd>
                <MudTd DataLabel="ROLE">@context.RoleName</MudTd>
               
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => Deleteuser(context.Id))">Delete</MudButton>
                </MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => Edituser(context, maxWidth))">@context.RoleName.Replace("ROLE_", "")</MudButton>
                </MudTd>

            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>

            <FooterContent>
                <MudTd colspan="10">Select All</MudTd>
            </FooterContent>

        </MudTable>
    </MudItem>
</MudGrid>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";

    private bool dataChanged = false;

    private HashSet<UserDetailDto> selectedItems = new HashSet<UserDetailDto>();

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    Dictionary<int, bool> showuserDialogStates = new Dictionary<int, bool>();

    private IEnumerable<UserDetailDto> user = new List<UserDetailDto>();

    protected override async Task OnInitializedAsync()
    {
        var token = await auth.GetTokenFromLocalStorage();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        user = await httpClient.GetFromJsonAsync<List<UserDetailDto>>($"api/Auth/list");

        foreach (var userDetail in user)
        {
            showuserDialogStates[userDetail.Id] = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && dataChanged)
        {
            dataChanged = false;
            await RefreshData();
        }
    }

    void OpenuserNested(int movieId)
    {
        showuserDialogStates[movieId] = true;
    }

    void CloseuserNested(int movieId)
    {
        showuserDialogStates[movieId] = false;
    }

    private bool FilterFunc1(UserDetailDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(UserDetailDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Username.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.RoleName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Username}".Contains(searchString))
            return true;
        return false;
    }

    private void OpenDialog(DialogOptions options)
    {
        // NEW USER
    }

    private async Task Edituser(UserDetailDto dto, DialogOptions options)
    {
        bool? result = await Dialog.ShowMessageBox("Change Role", "Change user role?", yesText: "Yes", noText: "No");
        if (result == true)
        {
            try
            {
                var token = await auth.GetTokenFromLocalStorage();
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var response = await httpClient.PostAsJsonAsync<UserDetailDto>("api/Auth/changeRole", dto);

                if (response.IsSuccessStatusCode)
                {
                    dataChanged = true;
                }
                else
                {
                    await Dialog.ShowMessageBox("Error", "Failed to change user role. " + response.RequestMessage);
                }
            }
            catch (HttpRequestException ex)
            {
                await Dialog.ShowMessageBox("Error", "Failed to change user role. " + ex.Message);
            }
        }
    }


    private async void Deleteuser(int userId)
    {
        bool? result = await Dialog.ShowMessageBox("Confirm Delete", "Are you sure you want to delete this user?", yesText: "Yes", noText: "No");
        if (result == true)
        {
            var token = await auth.GetTokenFromLocalStorage();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await httpClient.DeleteAsync($"api/Auth/delete/{userId}");

            if (response.IsSuccessStatusCode)
            {
                dataChanged = false;
            }
            else
            {
                await Dialog.ShowMessageBox("Error", "Failed to delete the user. Please try again.");
            }
        }
    }

    private async void DeleteSelecteduser()
    {
        bool? result = await Dialog.ShowMessageBox("Confirm Delete", "R u sure bout that? Data can't be change after remove!", yesText: "Yes", noText: "No");

        if (result == true)
        {
            foreach (var item in selectedItems)
            {
                try
                {
                    var token = await auth.GetTokenFromLocalStorage();
                    httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                    var response = await httpClient.DeleteAsync($"api/Auth/delete/{item.Id}");

                    if (response.IsSuccessStatusCode)
                    {
                        selectedItems.Remove(item);
                    }
                    else
                    {
                        await Dialog.ShowMessageBox("Error", "Failed to delete the user. Please try again.");
                    }
                }
                catch (HttpRequestException)
                {
                    await Dialog.ShowMessageBox("Network Error", "Failed to connect to the server. Please check your internet connection.");
                }
                catch (Exception ex)
                {
                    await Dialog.ShowMessageBox("Error", $"An unexpected error occurred: {ex.Message}");
                }
            }
            dataChanged = false;
        }
    }

    private async Task RefreshData()
    {
        var token = await auth.GetTokenFromLocalStorage();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        user = await httpClient.GetFromJsonAsync<List<UserDetailDto>>($"api/Auth/list");

        showuserDialogStates.Clear();

        foreach (var userDetail in user)
        {
            showuserDialogStates[userDetail.Id] = false;
        }

        StateHasChanged();
    }

}
