@page "/admin/editmoviedialog"
@using DotNETProject.Shared;
@using MudBlazor
@using Firebase.Storage;
@inject HttpClient httpClient
@inject IDialogService Dialog
@inject IJSRuntime JSRuntime

<MudDialog>
    <DialogContent>

        <MudGrid>

            <MudItem xs=4>
                <MudImage Fluid="true" Src="@currentMovie.LogoUrl" Alt="@currentMovie.Name" Elevation="25" Class="rounded-lg" />
            </MudItem>

            <MudItem xs=8>
                <MudImage Fluid="true" Src="@currentMovie.BackgroundUrl" Alt="@currentMovie.Name" Elevation="25" Class="rounded-lg" />
            </MudItem>

            <MudItem xs=4>
                <MudImage Fluid="true" Src="@currentMovie.PosterUrl" Alt="@currentMovie.Name" Elevation="25" Class="rounded-lg" />
            </MudItem>

            <MudItem xs=8>

                <MudTextField @bind-Value="currentMovie.Name" Label="Name" />

                <MudTextField @bind-Value="currentMovie.Time" Label="Time" />

                <MudTextField @bind-Value="currentMovie.TrailerUrl" Label="Trailer Url" />

                <MudTextField @bind-Value="currentMovie.ReleaseYear" Label="Release Year" />

                <MudTextField @bind-Value="currentMovie.Description" Label="Description" Lines="5" />

                <MudTextField @bind-Value="currentMovie.IMDBScore" Label="IMDB" Format="F1" />

                <MudTextField @bind-Value="currentMovie.View" Label="View" />

                <MudGrid>

                    <MudItem xs="3">
                        <MudFileUpload @bind-Files="video" Label="Video" T="IBrowserFile" Accept=".MKV .MOV .MP4">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           for="@context">
                                    Upload Movie
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudItem>

                    <MudItem xs="3">
                        <MudFileUpload @bind-Files="poster" Label="Poster" T="IBrowserFile" Accept=".png, .jpg">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                            Variant="Variant.Filled"
                                            Color="Color.Primary"
                                            StartIcon="@Icons.Material.Filled.CloudUpload"
                                            for="@context">
                                    Upload Poster
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudItem>

                    <MudItem xs="3">
                        <MudFileUpload @bind-Files="background" Label="Background Image" T="IBrowserFile" Accept=".png, .jpg">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           for="@context">
                                    Upload Background
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudItem>

                    <MudItem xs="3">
                        <MudFileUpload @bind-Files="logo" Label="Logo Image" T="IBrowserFile" Accept=".png, .jpg">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           for="@context">
                                    Upload Logo
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudItem>

                </MudGrid>

                <!-- The video preview -->
                @if (video != null)
                {
                    <MudText Icon="@Icons.Material.Filled.AttachFile">
                        @video.Name <code>@video.Size bytes</code>
                    </MudText>
                }

                <!-- The video preview -->
                @if (poster != null)
                {
                    <MudText Icon="@Icons.Material.Filled.AttachFile">
                        @poster.Name <code>@poster.Size bytes</code>
                    </MudText>
                }                

                <!-- The background preview -->
                @if (background != null)
                {
                    <MudText Icon="@Icons.Material.Filled.AttachFile">
                        @background.Name <code>@background.Size bytes</code>
                    </MudText>
                }

                <!-- The logo preview -->
                @if (logo != null)
                {
                    <MudText Icon="@Icons.Material.Filled.AttachFile">
                        @logo.Name <code>@logo.Size bytes</code>
                    </MudText>
                }               

            </MudItem>

            <MudItem xs="6">
                @* INPUT CASTS DIALOG *@
                <MudButton OnClick="OpenNestedForCast">Select Casts</MudButton>

                @* @if (filmCastDtos.Count != 0)
                {
                    @foreach (var item in filmCastDtos)
                    {
                        <MudText>
                            > @item.Cast.Name - @item.Role ;
                        </MudText>
                    }

                } *@

                <MudTable T="FilmCastDto" Items="@filmCastDtos" MultiSelection="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Role</MudTh>
                        @* <MudTh></MudTh>
                        <MudTh></MudTh> *@
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Cast.Id</MudTd>
                        <MudTd DataLabel="Name">@context.Cast.Name</MudTd>
                        <MudTd DataLabel="Role">@context.Role</MudTd>

                        @* <MudTd DataLabel="Remove">

                        </MudTd>
                        <MudTd DataLabel="Delete">

                        </MudTd> *@
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                    </PagerContent>
                    <FooterContent>
                        <MudTd colspan="5">Select All</MudTd>
                    </FooterContent>
                </MudTable>

                <MudDialog @bind-IsVisible="nestedVisibleForCast">
                    <DialogContent>
                        <MudText>Choose Cast(s) and Role(s)</MudText>

                        <MudSelect @bind-Value="selectedCast" Label="Select Cast" Data="casts" T="CastDto">
                            @foreach (var cast in casts)
                            {
                                <MudSelectItem T="CastDto" Value="@cast">@cast.Name</MudSelectItem>
                            }
                        </MudSelect>

                        <!-- Text field for Role -->
                        <MudTextField @bind-Value="selectedRole" Label="Role" />

                    </DialogContent>
                    <DialogActions>
                        <MudButton OnClick="CloseNestedForCast">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="UpdateCast">Ok</MudButton>
                    </DialogActions>
                </MudDialog>
            </MudItem>

            <MudItem xs="6">
                @* INPUT DIRECTORS DIALOG *@

                <MudButton OnClick="OpenNestedForDirector">Select Director</MudButton>

                @* @if (filmDirectorDtos.Count != 0)
                {
                    @foreach (var item in filmDirectorDtos)
                    {
                        <MudText>
                            > @item.Director.Name
                        </MudText>
                    }

                } *@

                <MudTable T="FilmDirectorDto" Items="@filmDirectorDtos" MultiSelection="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Name</MudTh>
                        
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Director.Id</MudTd>
                        <MudTd DataLabel="Name">@context.Director.Name</MudTd>

                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                    </PagerContent>
                    <FooterContent>
                        <MudTd colspan="5">Select All</MudTd>
                    </FooterContent>
                </MudTable>

                <MudDialog @bind-IsVisible="nestedVisibleForDirector">
                    <DialogContent>
                        <MudText>Choose Directors</MudText>

                        <MudSelect @bind-Value="selectedDirector" Label="Select Director" Data="directors" T="DirectorDto">
                            @foreach (var director in directors)
                            {
                                <MudSelectItem T="DirectorDto" Value="@director">@director.Name</MudSelectItem>
                            }
                        </MudSelect>


                    </DialogContent>

                    <DialogActions>
                        <MudButton OnClick="CloseNestedForDirector">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="UpdateDirector">Ok</MudButton>
                    </DialogActions>

                </MudDialog>
            </MudItem>

            <MudItem xs="6">
                @* INPUT GENRES DIALOG *@

                <MudButton OnClick="OpenNestedForGenre">Select Genre</MudButton>

                <MudTable T="FilmGenreDto" Items="@filmGenreDtos" MultiSelection="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Name</MudTh>

                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Genre.Id</MudTd>
                        <MudTd DataLabel="Name">@context.Genre.Name</MudTd>

                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                    </PagerContent>
                    <FooterContent>
                        <MudTd colspan="5">Select All</MudTd>
                    </FooterContent>
                </MudTable>

                <MudDialog @bind-IsVisible="nestedVisibleForGenre">
                    <DialogContent>
                        <MudText>Choose Genres</MudText>

                        <MudSelect @bind-Value="selectedGenre" Label="Select Genre" Data="genres" T="GenreDto">
                            @foreach (var genre in genres)
                            {
                                <MudSelectItem T="GenreDto" Value="@genre">@genre.Name</MudSelectItem>
                            }
                        </MudSelect>


                    </DialogContent>

                    <DialogActions>
                        <MudButton OnClick="CloseNestedForGenre">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="UpdateGenre">Ok</MudButton>
                    </DialogActions>

                </MudDialog>
            </MudItem>

        </MudGrid>        

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="nestedVisible">
    <DialogContent>
        <MudText Class="nested">@message</MudText>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    [Parameter] public MovieDto currentMovie { get; set; }

    public IBrowserFile poster;
    public IBrowserFile background;
    public IBrowserFile logo;
    public IBrowserFile video;
    public long MAXALLOWEDSIZE = 2147483648;

    private string message;
    private bool nestedVisible;
    private void OpenNested() => nestedVisible = true;
    private void CloseNested() => nestedVisible = false;

    private bool nestedVisibleForCast;
    private void OpenNestedForCast() => nestedVisibleForCast = true;
    private void CloseNestedForCast() => nestedVisibleForCast = false;

    private bool nestedVisibleForDirector;
    private void OpenNestedForDirector() => nestedVisibleForDirector = true;
    private void CloseNestedForDirector() => nestedVisibleForDirector = false;

    private bool nestedVisibleForGenre;
    private void OpenNestedForGenre() => nestedVisibleForGenre = true;
    private void CloseNestedForGenre() => nestedVisibleForGenre = false;

    private IEnumerable<CastDto> casts = new List<CastDto>();
    private ICollection<FilmCastDto> filmCastDtos = new List<FilmCastDto>();
    private IEnumerable<DirectorDto> directors = new List<DirectorDto>();
    private ICollection<FilmDirectorDto> filmDirectorDtos = new List<FilmDirectorDto>();
    private IEnumerable<GenreDto> genres = new List<GenreDto>();
    private ICollection<FilmGenreDto> filmGenreDtos = new List<FilmGenreDto>();

    private DirectorDto selectedDirector;
    private CastDto selectedCast;
    private GenreDto selectedGenre;
    private string selectedRole;

    protected override async Task OnInitializedAsync()
    {
        casts = await httpClient.GetFromJsonAsync<List<CastDto>>($"api/Casts");
        directors = await httpClient.GetFromJsonAsync<List<DirectorDto>>($"api/Directors");
        genres = await httpClient.GetFromJsonAsync<List<GenreDto>>($"api/Genres");

        foreach(var item in currentMovie.FilmCasts)
        {
            filmCastDtos.Add(item);
        }

        foreach (var item in currentMovie.FilmDirectors)
        {
            filmDirectorDtos.Add(item);
        }

        foreach (var item in currentMovie.FilmGenres)
        {
            filmGenreDtos.Add(item);
        }
    }

    private void UpdateCast()
    {
        FilmCastDto filmCastDto = new FilmCastDto();
        filmCastDto.Cast = selectedCast;
        filmCastDto.Role = selectedRole;

        filmCastDtos.Add(filmCastDto);
    }

    private void UpdateDirector()
    {
        FilmDirectorDto filmDirectorDto = new FilmDirectorDto();
        filmDirectorDto.Director = selectedDirector;

        filmDirectorDtos.Add(filmDirectorDto);
    }

    private void UpdateGenre()
    {
        FilmGenreDto filmGenreDto = new FilmGenreDto();
        filmGenreDto.Genre = selectedGenre;

        filmGenreDtos.Add(filmGenreDto);
    }

    async Task Submit()
    {
        try
        {
            string folderName = (currentMovie.Name).ToLower().Replace(' ', '-');
            string posterUrl = currentMovie.PosterUrl;
            string backgroundUrl = currentMovie.BackgroundUrl;
            string logoUrl = currentMovie.LogoUrl;
            string videoUrl = currentMovie.Link;

            if(poster != null)
            {
                posterUrl = await HandleFirebaseUpload(poster, "Films/Movies/" + folderName + "/Image");
            }
            if(background != null)
            {
                backgroundUrl = await HandleFirebaseUpload(background, "Films/Movies/" + folderName + "/Image");
            }
            if(logo != null)
            {
                logoUrl = await HandleFirebaseUpload(logo, "Films/Movies/" + folderName + "/Image");
            }
            if(video != null)
            {
                videoUrl = await HandleFirebaseUpload(video, "Films/Movies/" + folderName + "/Video");
            }
   
            if (!string.IsNullOrEmpty(posterUrl) && !string.IsNullOrEmpty(backgroundUrl) && !string.IsNullOrEmpty(logoUrl) && !string.IsNullOrEmpty(videoUrl))
            {
                currentMovie.PosterUrl = posterUrl;
                currentMovie.BackgroundUrl = backgroundUrl;
                currentMovie.LogoUrl = logoUrl;
                currentMovie.Link = videoUrl;
                currentMovie.FilmCasts = filmCastDtos;
                currentMovie.FilmDirectors = filmDirectorDtos;
                currentMovie.FilmGenres = filmGenreDtos;

                var response = await httpClient.PutAsJsonAsync($"api/Movies/{currentMovie.Id}", currentMovie);

                if (response.IsSuccessStatusCode)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    await JSRuntime.InvokeVoidAsync("refreshPage");
                }
                else
                {
                    var errorResponse = await response.Content.ReadAsStringAsync();
                    message = "An error occurred while saving to the database: " + errorResponse;
                    OpenNested();
                }
            }
            else
            {
                message = "An error occurred while uploading to Firebase.";
                OpenNested();
            }
        }
        catch (Exception ex)
        {
            message = "An error occurred: " + ex.Message;
            OpenNested();
        }
    }

    async Task<string> HandleFirebaseUpload(IBrowserFile file, string folderPath)
    {
        try
        {

            var storage = new FirebaseStorage("dotnetproject-339c8.appspot.com");

            folderPath = folderPath.Trim('/');

            var folderRef = storage.Child(folderPath);
            var folderExists = await FolderExistsAsync(folderRef);
            if (!folderExists)
            {
                await CreateFolderAsync(folderRef);
            }

            string imageFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";

            var imageUrl = await storage.Child(folderPath)
                .Child(imageFileName)
                .PutAsync(file.OpenReadStream(maxAllowedSize: MAXALLOWEDSIZE));

            return imageUrl;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            return null;
        }
    }

    private async Task<bool> FolderExistsAsync(FirebaseStorageReference folderRef)
    {
        try
        {
            await folderRef.GetDownloadUrlAsync();
            return true;
        }
        catch (FirebaseStorageException)
        {
            return false;
        }
    }

    private async Task CreateFolderAsync(FirebaseStorageReference folderRef)
    {
        try
        {
            await folderRef.Child(".placeholder").PutAsync(new MemoryStream());
        }
        catch (FirebaseStorageException ex)
        {
            Console.WriteLine($"Error creating folder: {ex.Message}");
        }
    }

    void Cancel() => MudDialog.Cancel();
}
